# coding: utf-8

"""
    Fabric Credential Manager API

    This is Fabric Credential Manager API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: kthare10@renci.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fabric_credmgr.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_post(self, **kwargs):  # noqa: E501
        """Generate OAuth tokens for an user  # noqa: E501

        Request to generate OAuth tokens for an user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name:
        :param str scope:
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_post_with_http_info(self, **kwargs):  # noqa: E501
        """Generate OAuth tokens for an user  # noqa: E501

        Request to generate OAuth tokens for an user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name:
        :param str scope:
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_name' in params:
            query_params.append(('projectName', params['project_name']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredMgrResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_with_id_token_post(self, string, **kwargs):  # noqa: E501
        """Generate OAuth tokens for an user provided CILogon ID Token  # noqa: E501

        Request to generate OAuth tokens for an user provided CILogon ID Token   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_id_token_post(string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRequest string: (required)
        :param str project_name:
        :param str scope:
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_id_token_post_with_http_info(string, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_id_token_post_with_http_info(string, **kwargs)  # noqa: E501
            return data

    def create_with_id_token_post_with_http_info(self, string, **kwargs):  # noqa: E501
        """Generate OAuth tokens for an user provided CILogon ID Token  # noqa: E501

        Request to generate OAuth tokens for an user provided CILogon ID Token   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_id_token_post_with_http_info(string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRequest string: (required)
        :param str project_name:
        :param str scope:
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['string', 'project_name', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_with_id_token_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'string' is set
        if ('string' not in params or
                params['string'] is None):
            raise ValueError("Missing the required parameter `string` when calling `create_with_id_token_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_name' in params:
            query_params.append(('projectName', params['project_name']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'string' in params:
            body_params = params['string']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/createWithIdToken', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredMgrResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get(self, user_id, **kwargs):  # noqa: E501
        """get tokens for an user  # noqa: E501

        Request to get tokens for an user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def get_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """get tokens for an user  # noqa: E501

        Request to get tokens for an user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredMgrResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_post(self, string, **kwargs):  # noqa: E501
        """Refresh OAuth tokens for an user  # noqa: E501

        Request to refresh OAuth tokens for an user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_post(string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RefreshRevokeRequest string: (required)
        :param str project_name:
        :param str scope:
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_post_with_http_info(string, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_post_with_http_info(string, **kwargs)  # noqa: E501
            return data

    def refresh_post_with_http_info(self, string, **kwargs):  # noqa: E501
        """Refresh OAuth tokens for an user  # noqa: E501

        Request to refresh OAuth tokens for an user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_post_with_http_info(string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RefreshRevokeRequest string: (required)
        :param str project_name:
        :param str scope:
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['string', 'project_name', 'scope']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'string' is set
        if ('string' not in params or
                params['string'] is None):
            raise ValueError("Missing the required parameter `string` when calling `refresh_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_name' in params:
            query_params.append(('projectName', params['project_name']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'string' in params:
            body_params = params['string']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredMgrResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_post(self, string, **kwargs):  # noqa: E501
        """Revoke a refresh token for an user  # noqa: E501

        Request to revoke a refresh token for an user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_post(string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RefreshRevokeRequest string: (required)
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_post_with_http_info(string, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_post_with_http_info(string, **kwargs)  # noqa: E501
            return data

    def revoke_post_with_http_info(self, string, **kwargs):  # noqa: E501
        """Revoke a refresh token for an user  # noqa: E501

        Request to revoke a refresh token for an user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_post_with_http_info(string, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RefreshRevokeRequest string: (required)
        :return: CredMgrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['string']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'string' is set
        if ('string' not in params or
                params['string'] is None):
            raise ValueError("Missing the required parameter `string` when calling `revoke_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'string' in params:
            body_params = params['string']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/revoke', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredMgrResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
